#!/bin/bash

ENDPOINT_URL="https://us-east1.watch.upstride.io/namespaces"
#ENDPOINT_URL="https://localhost/namespaces"

MAXIMUM_LOGS=100

function usage() {
    echo -e \
"Usage:

  sudo upload-logs -u username -p password -i image_name [-d directory -c container_name -n namespace]

  Retrieve and upload a docker container log to the specific endpoint <$ENDPOINT_URL>
  Arguments:
   - u: login's username [required]
   - p: login's password or access token [required]
   - d: directory [optional]
   - c: container's name [optional]
   - i: image's name [optional]
   - n: remote storage's namespace [optional][default::production]
   --dry-run: display logs location without doing anything
  "
}

while getopts :h:u:p:c:n:i:d: flag
do
    case "${flag}" in
        u) username=${OPTARG};;
        p) password=${OPTARG};;
        c) container_name=${OPTARG};;
        i) imageName=${OPTARG};;
        d) directory=${OPTARG};;
        n) namespace=${OPTARG};;
        h)
          usage
          exit 0
          ;;
        *)
          dry_run='yes';;
    esac
done

# Find logs by container name, by container image or by folder
function find_logs() {
  local OPTIND
  while getopts :d:i:c: opt
  do
      case "${opt}" in
          d) directory=${OPTARG};;
          c) container=${OPTARG};;
          i) image=${OPTARG};;
          *) ;;
      esac
  done
  logfiles=()
  #echo "i=$image,d=$directory,c=$container"
  [ -n "$container" ] && \
    container_id=$(docker inspect --format="{{.Id}}" "$container" 2>/dev/null) && \
    logfiles+=$(find /var/lib/docker/containers/"$container_id"/  -maxdepth 2 \
                  -name '*.log' -o -name 'log' -o -name '*.log.*' )
  if [ -n "$directory" ]; then
    [ -d "$directory" ] &&\
    logfiles+=$(find "$directory"  -maxdepth 2 \
                  -name '*.log' -o -name 'log' -o -name '*.log.*' )
    [ -f "$directory" ] &&\
        logfiles+=$directory
  fi
  [ -n "$image" ] &&\
    short_uuid=$(docker ps --format {{.ID}} --filter "ancestor=$image") &&\
    long_uuid=$(docker inspect --format="{{.Id}}" "$short_uuid" 2>/dev/null)  &&\
    logfiles+=$(find /var/lib/docker/containers/"$long_uuid"/  -maxdepth 2 \
                  -name '*.log' -o -name 'log' -o -name '*.log.*' )
  echo "$logfiles"
}


#No arguments display usage
[ $# == 0 ] && usage && exit 0

echo  -e "\n\033[1;33m *** enter"

# check dependencies
echo -e  "\033[1;32m  step: check dependencies \033[0m"
uname > /dev/null  ||   { echo -e "\033[1;31m  x incompatible OS system \033[0m\n" && usage && exit 2; }
docker version > /dev/null  ||   { echo -e "\033[1;31m  x missing docker \033[0m\n" && usage && exit 2; }
curl --version > /dev/null ||   { echo -e "\033[1;31m  x missing curl \033[0m\n" && usage && exit 2; }

# check root
echo -e "\033[1;32m  step: check root privileges \033[0m"
[ $(id -u) -eq 0 ] || \
  { echo -e "\033[1;31m  x must be run with root privileges \033[0m\n" && usage && exit 2; }


# read args
echo -e "\033[1;32m  step: check arguments \033[0m"
[ -z "$dry_run" ] && [ -z "$username" ] &&   { echo -e "\033[1;31m  x missing username \033[0m\n" && usage && exit 2; }
[ -z "$dry_run" ] && [ -z "$password" ] &&   { echo -e "\033[1;31m  x missing password \033[0m\n" && usage && exit 2; }
[ -z "$container_name""$imageName""$directory" ] &&\
   { echo -e "\033[1;31m  x missing one of directory, image_name or container_name \033[0m\n" && usage && exit 2; }
[ -z "$namespace" ] &&  namespace="production"

if [ -z "$dry_run" ]; then
echo -e "\033[1;32m  step: check login \033[0m"
code=$(curl -XPOST -u "$username:$password" --connect-timeout 3 --url "$ENDPOINT_URL/$namespace" \
      --write-out "%{http_code}\n" --silent --output /dev/null)
[ "$code" -eq 401 ] &&  { echo -e "\033[1;31m  x wrong login username/password \033[0m\n" && exit 2; }
[ -z "$code" ] &&  { echo -e "\033[1;31m  x issue with connection to the backend \033[0m\n" && exit 2; }

echo -e "\033[1;32m  step: pushing log's files \033[0m"
else
  echo -e "\033[0;33m  + dry-run: $dry_run \033[0m"
fi
path=()
STATUS="FAILED"
declare -i total=0

if [ -n "$directory" ]; then
  STATUS="SUCCESS"
  path=logs/$(date '+%Y-%m-%d')/raw/$(date '+%H-%M')
  [ -z "$dry_run" ] && echo -e "\033[0;33m  + remote path: $namespace/$path \033[0m"
  for log in $(find_logs -d "$directory"); do
    [ -n "$dry_run" ] && echo -e "\033[0;33m  + log: $log \033[0m" \
        && total+=1 && continue
    code=$(curl -XPOST -u "$username:$password" --url "$ENDPOINT_URL/$namespace/files/?path=$path" \
          -F file=@"$log" --write-out "%{http_code}\n" --silent --output /dev/null)
    [ "$code" -ne 200 ] &&  \
    { echo -e "\033[1;31m  x something went wrong during upload: log=$log \033[0m"; } && \
    STATUS=FAILED ||\
    total+=1
    [ $total -gt $MAXIMUM_LOGS ] && break
  done
fi

if [ -n "$container_name" ]; then
  STATUS="SUCCESS"
  path=logs/$(date '+%Y-%m-%d')/docker/$container_name/$(date '+%H-%M')
    echo -e "\033[0;33m  + source docker: $container_name \033[0m"
  [ -z "$dry_run" ] && echo -e "\033[0;33m  + remote path: $namespace/$path \033[0m"
  for log in $(find_logs -c "$container_name"); do
    [ -n "$dry_run" ] && echo -e "\033[0;33m  + log: $log \033[0m" \
        && total+=1 && continue
    code=$(curl -XPOST -u "$username:$password" --url "$ENDPOINT_URL/$namespace/files/?path=$path" \
          -F file=@"$log" --write-out "%{http_code}\n" --silent --output /dev/null --insecure)
    [ "$code" -ne 200 ] &&  \
    { echo -e "\033[1;31m  x something went wrong during upload: log=$log \033[0m"; } && \
    STATUS=FAILED ||\
    total+=1
    [ $total -gt $MAXIMUM_LOGS ] && break
  done
fi

if [ -n "$imageName" ]; then
  STATUS="SUCCESS"
  path=logs/$(date '+%Y-%m-%d')/docker/$imageName/$(date '+%H-%M')
  echo -e "\033[0;33m  + source docker: $imageName \033[0m"
  [ -z "$dry_run" ] && echo -e "\033[0;33m  + remote path: $namespace/$path \033[0m"
  for log in $(find_logs -i "$imageName"); do
    [ -n "$dry_run" ] && echo -e "\033[0;33m  + log: $log \033[0m" \
        && total+=1 && continue
    code=$(curl -XPOST -u "$username:$password" --url "$ENDPOINT_URL/$namespace/files/?path=$path" \
          -F file=@"$log" --write-out "%{http_code}\n" --silent --output /dev/null)
    [ "$code" -ne 200 ] &&  \
    { echo -e "\033[1;31m  x something went wrong during upload: log=$log \033[0m"; } && \
    STATUS=FAILED ||\
    total+=1
    [ $total -gt $MAXIMUM_LOGS ] && break
  done
fi

echo -e "\033[0;33m  + total: $total \033[0m"
[ $STATUS == "SUCCESS" -a $total -gt 0 ] && echo -e "\033[0;33m  + status: $STATUS \033[0m" ||
  echo -e "\033[0;31m  + status: FAILED \033[0m"

echo  -e "\033[1;33m *** exit\n" && exit 0




